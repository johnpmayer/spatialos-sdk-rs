package example;

import "improbable/vector3.schema";

type CommandData {
    int32 value = 1;

    type NestedType {
        string some_string = 1;

        enum NestedEnum {
            First = 1;
            Second = 2;
        }
    }
}

component Example {
    id = 1000;

    float x = 1;
    improbable.Vector3d point = 2;

    command CommandData test_command(CommandData);
}

component SomeComponent {
    id = 1003;
    data SomeData;
}

type SomeData {
    string foo = 1;
    int32 bar = 2;
}

enum CoolEnum {
    Boop = 1;
    Bop = 2;
    Bap = 3;
}

type CoolAnnotation {
    CoolEnum cool = 1;
    SomeData data = 2;
}

[CoolAnnotation(cool = CoolEnum.Bap, data = SomeData(foo = "wowie zowie!", bar = 7))]
component AnotherComponent {
    id = 1002;
    data CommandData.NestedType;
}

/// Indicates that an entity should rotate in a circle around the specified center point.
component Rotate {
    id = 1001;

    /// The current angle (in radians) offset from the base.
    double angle = 1;

    /// The radius of the rotation.
    double radius = 5;

    /// The center point of the rotation.
    // TODO: Use `improbable.Vector3d` here. Currently can't be used due to issues
    // with the code generation logic.
    double center_x = 2;
    double center_y = 3;
    double center_z = 4;
}

component Subpackage {
    id = 1005;

    string some_field = 1;
}
